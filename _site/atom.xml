<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>My 30 Days of Hacking Challenge</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2021-01-07T09:57:46+05:30</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Gyan Ranjan</name>
   <email>gyan3098@gmail.com</email>
 </author>

 
 <entry>
   <title>Binary</title>
   <link href="http://localhost:4000/2021/01/07/SomeBasicsOfBinary/"/>
   <updated>2021-01-07T00:00:00+05:30</updated>
   <id>http://localhost:4000/2021/01/07/SomeBasicsOfBinary</id>
   <content type="html">&lt;p&gt;Some binary Basics&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Basics of Reversing</title>
   <link href="http://localhost:4000/2021/01/06/Reversing/"/>
   <updated>2021-01-06T00:00:00+05:30</updated>
   <id>http://localhost:4000/2021/01/06/Reversing</id>
   <content type="html">&lt;h3 id=&quot;understanding-the-assembly-of-inline-arguments&quot;&gt;Understanding the assembly of inline arguments&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;  int main(int argc, char **argv){ /* .....*/ }
  OR
  int main(int argc, char *argv[]) { /* ... */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argc&lt;/code&gt; means (ARGument Count) is int and stores number of command-line arguments passed by the user including the name of the program.
And &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv&lt;/code&gt; means (ARGument Vector) is array of character pointers listing all the arguments.&lt;/p&gt;

&lt;p&gt;Ex:- ./binary arg1 arg2 arg3&lt;br /&gt;
value of argc = 4 (3 values + 1 binary-name)&lt;br /&gt;
value of argv = [‘arg1’, ‘arg2’, ‘arg3’]&lt;/p&gt;

&lt;p&gt;When disassembling the binary with any of the reverse engineering tools(like, ghidra, radare2, cutter, gdb or any other). To get to a specific location of the array(here to know the value of second argument i.e. arg1, the compiler do the below works)&lt;/p&gt;

&lt;p&gt;The below is an example of&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/public/understanding_argv.png&quot; alt=&quot;understanding_argv&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let me explain it in easy way &lt;br /&gt;
int main(int argc, char **argv){/* … */}&lt;/p&gt;

&lt;p&gt;When running the program&lt;br /&gt;
-&amp;gt; ./easy abcd&lt;/p&gt;

&lt;p&gt;so, argv[0] = ‘easy’&lt;br /&gt;
and argv[1] = ‘abcd’&lt;/p&gt;

&lt;p&gt;To get value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; register, assembler do the following operations.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  mov eax, dword[argv]
  add eax, 4
  mov eax, dword[eax]      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So, Let me explain this to you, first line moves the address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; i.e. address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[0]&lt;/code&gt; {since address of first index of array = starting address of array}. &lt;br /&gt;
Second line increments the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; by 4, so now it points to the address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt;.&lt;br /&gt;
Now, address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt; is stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt;, third line moves the contents of value at the memory location of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt;. Here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dword[eax]&lt;/code&gt; has the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv[1]&lt;/code&gt;. So now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; has the value 0x64636261.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://maxkersten.nl/binary-analysis-course/introduction/secura-grand-slam-ctf-easy-reverse/&quot;&gt;Reference link to understand above with an example&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Assembly Basics</title>
   <link href="http://localhost:4000/2021/01/06/Assembly-Basics/"/>
   <updated>2021-01-06T00:00:00+05:30</updated>
   <id>http://localhost:4000/2021/01/06/Assembly-Basics</id>
   <content type="html">&lt;p&gt;By default, the address in Radare2 is set to the entry point of the executable. This function is named &lt;em&gt;entry0&lt;/em&gt; by default.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Basics of CPU</title>
   <link href="http://localhost:4000/2021/01/05/Starting/"/>
   <updated>2021-01-05T00:00:00+05:30</updated>
   <id>http://localhost:4000/2021/01/05/Starting</id>
   <content type="html">&lt;h3 id=&quot;common-known-cpu-architectures&quot;&gt;Common known CPU architectures&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;32-bit(x-86)    // used on desktop and latptop&lt;/li&gt;
  &lt;li&gt;64-bit(x-64_86) // used on desktop and latptop&lt;/li&gt;
  &lt;li&gt;ARM   // used on mobile&lt;/li&gt;
  &lt;li&gt;MIPS  //used on embedded devices&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;registers&quot;&gt;Registers&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x86 family&lt;/code&gt;
8086, 80386(32-bit architecture, also called i386) and AMD’s Opteron(64-bit architecture).
These CPUs are backward compatible like 32-bit binary can be executed on a 64-bit platform.&lt;/p&gt;

&lt;h4 id=&quot;general-purpose-registers&quot;&gt;General Purpose Registers&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;16-bit&lt;/code&gt; Intel 8086 GPRs:-&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Accumulator Register (AX)&lt;/li&gt;
  &lt;li&gt;Base Register (BX)&lt;/li&gt;
  &lt;li&gt;Counter Register (CX)&lt;/li&gt;
  &lt;li&gt;Data Register (DX)&lt;/li&gt;
  &lt;li&gt;Stack Pointer Register (SP)&lt;/li&gt;
  &lt;li&gt;Stack Base Pointer Register (BP)&lt;/li&gt;
  &lt;li&gt;Source Index Register (SI)&lt;/li&gt;
  &lt;li&gt;Destination Index Register (DI)&lt;/li&gt;
  &lt;li&gt;Instruction Pointer Register (IP)&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;message&quot;&gt;
AX = AH and AL &lt;br /&gt;
BX = BH and BL &lt;br /&gt;
CX = CH and CL &lt;br /&gt;
DX = DH and DL &lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;32-bit&lt;/code&gt; architecture GPRs:-
&lt;br /&gt;
Here E stands for &lt;em&gt;Extended&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;message&quot;&gt;
EAX, EBX, ECX, EDX, ESP, EBP, ESI, EDI and EIP
&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64-bit&lt;/code&gt; architecture GPRs:-
&lt;br /&gt;
Size of registers are twice tht of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;32-bit&lt;/code&gt;. Here R stands for &lt;em&gt;Register&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;message&quot;&gt;
RAX, RBX, RCX, RDX, RSP, RBP, RSI, RDI and RIP
&lt;br /&gt;
R8, R9, R10, R11, R12, R13, R14 and R15
&lt;/p&gt;
&lt;p&gt;Volatile Registers(values get lost when another function is called) :- R8, R9, R10 and R11
&lt;br /&gt;
Values in the registers R12, R13, R14 and R15 are saved beore calling another function&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Passing values&lt;/strong&gt;
8-bit, 16-bit and 32-bit uses stck to pass arguments to a function
&lt;br /&gt;
In 64-bit variant, few arguments are stored in registers &lt;em&gt;(RCX, RDX, R8 and R9)&lt;/em&gt; and remanining arguments are pushed on the stack.&lt;/p&gt;

&lt;h4 id=&quot;segment-registers&quot;&gt;Segment Registers&lt;/h4&gt;
&lt;p&gt;The purpose of these registers is to store the value of the segments of the binary which is being executed.
Nowadays, these registers are not always used, the reason behind is that now the memory is not accessed &lt;em&gt;flat&lt;/em&gt; but via &lt;em&gt;paging&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Code Segment Register (CS)&lt;/em&gt; :- contains the value of the code segment&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Data Segment Register (DS)&lt;/em&gt; :- contains the value of the data segment&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Extra Segment Register (ES, FS nd GS)&lt;/em&gt; :- these are filled with data from OS such s exception or thread handling&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Stack Segment Register (SS)&lt;/em&gt; :- contains the value of the stack segment&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;endianess&quot;&gt;Endianess&lt;/h3&gt;
&lt;h6 id=&quot;big-endian-&quot;&gt;Big Endian \&lt;/h6&gt;
&lt;p&gt;The big end of the data is read first.
ex:- abcd  // ascii value of a = 0x61, b = 0x62, c = 0x63, d = 0x64
&lt;br /&gt;
So in Big Endian Notation (“abcd”) is written as &lt;em&gt;0x61626364&lt;/em&gt; as a hexadecimal value.&lt;/p&gt;
&lt;h6 id=&quot;little-endian-&quot;&gt;Little Endian \&lt;/h6&gt;
&lt;p&gt;Reverse of Big Endian (least significant byte at lowest address) &lt;br /&gt;
So in Little Endian Notation (“abcd”) is written as
&lt;em&gt;0x64636261&lt;/em&gt; as a hexadecimal value.&lt;/p&gt;

&lt;h5 id=&quot;flags&quot;&gt;Flags&lt;/h5&gt;
&lt;p&gt;Flags are not much helpful except some in reverse engineering.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introducing Lanyon</title>
   <link href="http://localhost:4000/2021/01/03/introducing-lanyon/"/>
   <updated>2021-01-03T00:00:00+05:30</updated>
   <id>http://localhost:4000/2021/01/03/introducing-lanyon</id>
   <content type="html">&lt;p&gt;Lanyon is an unassuming &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; theme that places content first by tucking away navigation in a hidden drawer. It’s based on &lt;a href=&quot;http://getpoole.com&quot;&gt;Poole&lt;/a&gt;, the Jekyll butler.&lt;/p&gt;

&lt;h3 id=&quot;built-on-poole&quot;&gt;Built on Poole&lt;/h3&gt;

&lt;p&gt;Poole is the Jekyll Butler, serving as an upstanding and effective foundation for Jekyll themes by &lt;a href=&quot;https://twitter.com/mdo&quot;&gt;@mdo&lt;/a&gt;. Poole, and every theme built on it (like Lanyon here) includes the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complete Jekyll setup included (layouts, config, &lt;a href=&quot;/404&quot;&gt;404&lt;/a&gt;, &lt;a href=&quot;/atom.xml&quot;&gt;RSS feed&lt;/a&gt;, posts, and &lt;a href=&quot;/about&quot;&gt;example page&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Mobile friendly design and development&lt;/li&gt;
  &lt;li&gt;Easily scalable text and component sizing with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rem&lt;/code&gt; units in the CSS&lt;/li&gt;
  &lt;li&gt;Support for a wide gamut of HTML elements&lt;/li&gt;
  &lt;li&gt;Related posts (time-based, because Jekyll) below each post&lt;/li&gt;
  &lt;li&gt;Syntax highlighting, courtesy Pygments (the Python-based code snippet highlighter)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lanyon-features&quot;&gt;Lanyon features&lt;/h3&gt;

&lt;p&gt;In addition to the features of Poole, Lanyon adds the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Toggleable sliding sidebar (built with only CSS) via &lt;strong&gt;☰&lt;/strong&gt; link in top corner&lt;/li&gt;
  &lt;li&gt;Sidebar includes support for textual modules and a dynamically generated navigation with active link support&lt;/li&gt;
  &lt;li&gt;Two orientations for content and sidebar, default (left sidebar) and &lt;a href=&quot;https://github.com/poole/lanyon#reverse-layout&quot;&gt;reverse&lt;/a&gt; (right sidebar), available via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/poole/lanyon#themes&quot;&gt;Eight optional color schemes&lt;/a&gt;, available via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/poole/lanyon#readme&quot;&gt;Head to the readme&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h3 id=&quot;browser-support&quot;&gt;Browser support&lt;/h3&gt;

&lt;p&gt;Lanyon is by preference a forward-thinking project. In addition to the latest versions of Chrome, Safari (mobile and desktop), and Firefox, it is only compatible with Internet Explorer 9 and above.&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;Lanyon is developed on and hosted with GitHub. Head to the &lt;a href=&quot;https://github.com/poole/lanyon&quot;&gt;GitHub repository&lt;/a&gt; for downloads, bug reports, and features requests.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://localhost:4000/2021/01/02/example-content/"/>
   <updated>2021-01-02T00:00:00+05:30</updated>
   <id>http://localhost:4000/2021/01/02/example-content</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  Howdy! This is an example blog post that shows several types of HTML content supported in this theme.
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console
&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments
&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;return a + b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function
&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What's Jekyll?</title>
   <link href="http://localhost:4000/2021/01/01/whats-jekyll/"/>
   <updated>2021-01-01T00:00:00+05:30</updated>
   <id>http://localhost:4000/2021/01/01/whats-jekyll</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is a static site generator, an open-source tool for creating simple yet powerful websites of all shapes and sizes. From &lt;a href=&quot;https://github.com/mojombo/jekyll/blob/master/README.markdown&quot;&gt;the project’s readme&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll is a simple, blog aware, static site generator. It takes a template directory […] and spits out a complete, static website suitable for serving with Apache or your favorite web server. This is also the engine behind GitHub Pages, which you can use to host your project’s page or blog right here from GitHub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s an immensely useful tool and one we encourage you to use here with Lanyon.&lt;/p&gt;

&lt;p&gt;Find out more by &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;visiting the project on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 

</feed>
